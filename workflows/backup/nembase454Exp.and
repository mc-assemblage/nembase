#!/usr/bin/env anduril-runner
//$ -b /home/mclarke2/anduril/nembase/
//$ -d /home/mclarke2/execdir/nembase454/
//$ --hosts /home/mclarke2/anduril/config/local.conf
//$ --log /home/mclarke2/logdir/nembase454/
//$ --threads 6


ASM_KEEP_MIRA=INPUT(path="/home/mclarke2/anduril/workflows/wf.in/include-mira.txt")
ASM_KEEP_NEWB=INPUT(path="/home/mclarke2/anduril/workflows/wf.in/include-newb.txt")
ASM_KEEP_CAP3=INPUT(path="/home/mclarke2/anduril/workflows/wf.in/include-cap3.txt")

srasearch = record()
srafetch = record()
getrunsbyplatform = record()
getexpaccessions = record()

outputAsmCap3 = record()
outputAsmNewb = record()
outputSFF = record()
outputAsmMira = record()
outputFastq = record()
outputVec = record()


for row: std.itercsv("/home/mclarke2/anduril/workflows/wf.in/nematodes454.csv") {
	SRA_SEARCHTERM = std.concat(row.Organism, "[Organism] AND transcriptom*", sep="")
	ORG = std.strReplace(row.Organism, " ", "_")
	
	srasearch[ORG] = NCBISRASearch(term=SRA_SEARCHTERM, @host="auto")
	srafetch[ORG] = NCBISRAFetch(resultlist=srasearch[ORG].resultlist, @host="auto")
	
	getrunsbyplatform[ORG] = GetRunsByPlatform(
		srafetchxml=srafetch[ORG].srafetchxml, 
		platform='454', 
		@host="auto")
	
	sraDownload = record()
	sra2SFF = record()
	sra2Fastq = record()
	
	for iter: std.itercsv(getrunsbyplatform[ORG].srarunlist) {
		sraDownload[iter.NCBISRARunID] = NCBISRADownload(
			srarun=iter.NCBISRARunID, 
			retries=2, 
			@host="auto")
			
		sra2SFF[iter.NCBISRARunID] = SRA2SFF(
			srafile=sraDownload[iter.NCBISRARunID].srafile, 
			@host="auto")
			
		sra2Fastq[iter.NCBISRARunID] = SRA2FASTQ(
			srafile=sraDownload[iter.NCBISRARunID].srafile,
			srafetchxml=srafetch[ORG].srafetchxml,
			accession=iter.NCBISRARunID, 
			@host="auto")
	}
	
	getexpaccessions[ORG] = GetExpAccessions(
		srafetchxml=srafetch[ORG].srafetchxml,
		platform='454',
		@host="auto")
		
	sffFileArray = record()
	fastqFileArray = record()
	
	sffFileArray[ORG] = std.makeArray(sra2SFF)
	fastqFileArray[ORG] = std.makeArray(sra2Fastq)
	
	getrunsbyexp = record()
	expFilesSFF = record()
	expFilesFq = record()
	expMergedSFF = record()
	expMergedFq = record()
	
	normByMedian = record()
	fastQC = record()
	overRepKmers = record()
	ssaha2Out = record()
	namelistKeep = record()
	filteredSFF = record()
	miraAssembly = record()
	newblerAsm = record()
	
	miraAsmFa = record()
	miraAsmQu = record()
	newblerAsmFa = record()
	newblerAsmQu = record()
	asmFilesFa = record()
	asmFilesQu = record()
	mergedAsmFa = record()
	mergedAsmQu = record()
	cap3Asm = record()
	
	outputAsmCap3[ORG] = record()
	outputAsmNewb[ORG] = record()
	outputAsmMira[ORG] = record()
	outputSFF[ORG] = record()
	outputFastq[ORG] = record()
	outputVec[ORG] = record()
		
	for iter: std.itercsv(getexpaccessions[ORG].sraexplist) {
		getrunsbyexp[iter.NCBISRAExpID] = GetRunsByExp(
			srafetchxml=srafetch[ORG].srafetchxml,
			accession=iter.NCBISRAExpID,
			platform='454',
			@host="auto")
			
		expFilesSFF[iter.NCBISRAExpID] = GetFromArrayByKey(
			in_array=sffFileArray,
			keys=getrunsbyexp[iter.NCBISRAExpID].srarunlist,
			@host="auto")
			
		expFilesFq[iter.NCBISRAExpID] = GetFromArrayByKey(
			in_array=fastqFileArray,
			keys=getrunsbyexp[iter.NCBISRAExpID].srarunlist,
			@host="auto")
			
		expMergedSFF[iter.NCBISRAExpID] = SFFMerge(
			in_array=expFilesSFF[iter.NCBISRAExpID].out_array,
			@host="auto")
			
		expMergedFq[iter.NCBISRAExpID] = FASTQMerge(
			in_array=expFilesFq[iter.NCBISRAExpID].out_array,
			@host="auto")
			
			
			
		
		normByMedian[iter.NCBISRAExpID] = NormalizeByMedian(
			inputfile=expMergedFq[iter.NCBISRAExpID].output,
			minhashsize=16e9,
			@host="auto")
			
		fastQC[iter.NCBISRAExpID] = FASTQC(
			fastqfile=expMergedFq[iter.NCBISRAExpID].output,
			kmersize=8,
			threads=4,
			@host="auto")
			
		overRepKmers[iter.NCBISRAExpID] = GetOverrepresentedKMERS(
			fastqcdir=fastQC[iter.NCBISRAExpID].fastqcdir,
			@host="auto")
			
		ssaha2Out[iter.NCBISRAExpID] = SSAHA2(
			vector=overRepKmers[iter.NCBISRAExpID].fastafile,
			inputfile=normByMedian[iter.NCBISRAExpID].outputfile,
			rtype="454",
			@host="auto")
			
		namelistKeep[iter.NCBISRAExpID] = GetNamesFromFASTQ(
			fastqfile=normByMedian[iter.NCBISRAExpID].outputfile,
			@host="auto")
		
		filteredSFF[iter.NCBISRAExpID] = SFFExtract(
			sfffile=expMergedSFF[iter.NCBISRAExpID].output,
			namelist=namelistKeep[iter.NCBISRAExpID].namelist,
			@host="auto")
		
		miraAssembly[iter.NCBISRAExpID] = MIRA454EST(
			fastqfile=normByMedian[iter.NCBISRAExpID].outputfile,
			ssaha2out=ssaha2Out[iter.NCBISRAExpID].ssaha2out,
			tmpdir="/tmp",
			threads=4,
			@host="auto")
		
		newblerAsm[iter.NCBISRAExpID] = NewblerCDNAAsm(
			inputfiles=std.makeArray({filteredSFF[iter.NCBISRAExpID].output}),
			vectortrimming=overRepKmers[iter.NCBISRAExpID].fastafile,
			threads=4,
			retries=2,
			@host="auto")
			
			
		miraAsmFa[iter.NCBISRAExpID] = FindFile(
			basepath=miraAssembly[iter.NCBISRAExpID].mira_assembly,
			fpattern="mira_out.unpadded.fasta")
		miraAsmQu[iter.NCBISRAExpID] = FindFile(
			basepath=miraAssembly[iter.NCBISRAExpID].mira_assembly,
			fpattern="mira_out.unpadded.fasta.qual")
		newblerAsmFa[iter.NCBISRAExpID] = FindFile(
			basepath=newblerAsm[iter.NCBISRAExpID].assemblydir,
			fpattern="454Isotigs.fna")
		newblerAsmQu[iter.NCBISRAExpID] = FindFile(
			basepath=newblerAsm[iter.NCBISRAExpID].assemblydir,
			fpattern="454Isotigs.qual")
			
		asmFilesFa[iter.NCBISRAExpID] = std.makeArray({
			miraAsmFa[iter.NCBISRAExpID].filesfound["0"],
			newblerAsmFa[iter.NCBISRAExpID].filesfound["0"]})
		asmFilesQu[iter.NCBISRAExpID] = std.makeArray({
			miraAsmQu[iter.NCBISRAExpID].filesfound["0"],
			newblerAsmQu[iter.NCBISRAExpID].filesfound["0"]})
			
		mergedAsmFa[iter.NCBISRAExpID] = FASTAMerge(
			fastafiles=asmFilesFa[iter.NCBISRAExpID])
		mergedAsmQu[iter.NCBISRAExpID] = FASTAMerge(
			fastafiles=asmFilesQu[iter.NCBISRAExpID])
			
		cap3Asm[iter.NCBISRAExpID] = CAP3(
			fastafile=mergedAsmFa[iter.NCBISRAExpID].output,
			force fastaqualfile=mergedAsmQu[iter.NCBISRAExpID].output)
			
		outputAsmCap3[ORG][iter.NCBISRAExpID] = cap3Asm[iter.NCBISRAExpID].assemblydir
		outputAsmNewb[ORG][iter.NCBISRAExpID] = newblerAsm[iter.NCBISRAExpID].assemblydir
		outputAsmMira[ORG][iter.NCBISRAExpID] = miraAssembly[iter.NCBISRAExpID].mira_assembly
		outputSFF[ORG][iter.NCBISRAExpID] = filteredSFF[iter.NCBISRAExpID].output
		outputFastq[ORG][iter.NCBISRAExpID] = normByMedian[iter.NCBISRAExpID].outputfile
		outputVec[ORG][iter.NCBISRAExpID] = overRepKmers[iter.NCBISRAExpID].fastafile
	}
}


zipAsmCap3454 = record()
zipAsmNewbler454 = record()
zipAsmMira454 = record()
zipSFF454 = record()
zipFastq454 = record()
zipVec454 = record()

for ORG, portValue: outputAsmNewb {
	zipAsmCap3454[ORG] = ZipOutput(
		std.makeArray(outputAsmCap3[ORG]),
		fn_include=ASM_KEEP_CAP3,
		rmPathDepth=3,
		@host="local")

	zipAsmNewbler454[ORG] = ZipOutput(
		std.makeArray(outputAsmNewb[ORG]), 
		fn_include=ASM_KEEP_NEWB, 
		rmPathDepth=3, 
		@host="local")
		
	zipAsmMira454[ORG] = ZipOutput(
		std.makeArray(outputAsmMira[ORG]), 
		fn_include=ASM_KEEP_MIRA, 
		rmPathDepth=3, 
		@host="local")
		
	zipSFF454[ORG] = ZipOutput(
		std.makeArray(outputSFF[ORG]), 
		rmPathDepth=3, 
		@host="local")
		
	zipFastq454[ORG] = ZipOutput(
		std.makeArray(outputFastq[ORG]), 
		rmPathDepth=3,
		@host="local")
		
	zipVec454[ORG] = ZipOutput(
		std.makeArray(outputVec[ORG]), 
		rmPathDepth=3,
		@host="local")
}

for ORG, portValue: zipAsmNewbler454 {
	OUTPUT(zipAsmCap3454[ORG])
	OUTPUT(zipAsmNewbler454[ORG])
	OUTPUT(zipSFF454[ORG])
	OUTPUT(zipAsmMira454[ORG])
	OUTPUT(zipFastq454[ORG])
	OUTPUT(zipVec454[ORG])
}



